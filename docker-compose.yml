# version: '3.8'  # Removed obsolete version field

# =============================================================================
# Council of Nycea - Unified Monorepo Docker Compose Configuration
# Development Setup with Hot Reloading
# =============================================================================
# 
# Database Initialization Order:
# 1. PostgreSQL: 01-init-database.sql → 02-persona-discussion-schema.sql → 03-seed-data.sql
# 2. Neo4j: 01-init-graph.cypher → 04-neo4j-tools-schema.cypher
# 3. All migration files are available in /docker-entrypoint-initdb.d/migrations/
# 
# =============================================================================

services:
  # Database Services
  postgres:
    image: postgres:17.5-bullseye
    container_name: uaip-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-uaip}
      POSTGRES_USER: ${POSTGRES_USER:-uaip_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-uaip_password}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES:-uaip,uaip_test}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # PostgreSQL initialization files (executed in alphabetical order)
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U uaip_user -d uaip"]
      interval: 30s
      timeout: 10s
      retries: 5

  neo4j:
    image: neo4j:2025.04.0-community-bullseye
    container_name: uaip-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH:-neo4j/uaip_dev_password}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      # Neo4j initialization files (executed in alphabetical order)
      - ./database/neo4j/init:/docker-entrypoint-initdb.d
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "uaip_dev_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:8-alpine
    container_name: uaip-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - uaip-network
    command: redis-server --protected-mode yes --bind 0.0.0.0 --requirepass ${REDIS_PASSWORD:-uaip_redis_password}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-uaip_redis_password}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-uaip_redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Embedding Engine (Qdrant for vector storage)
  qdrant:
    image: qdrant/qdrant:v1.14.1
    container_name: uaip-qdrant
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD-SHELL", "timeout 5s bash -c '</dev/tcp/localhost/6333'"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TEI (Text Embeddings Inference) Services
  tei-embeddings:
    image: ghcr.io/huggingface/text-embeddings-inference:1.7
    container_name: uaip-tei-embeddings
    runtime: nvidia
    command: --model-id mixedbread-ai/mxbai-embed-large-v1 --port 80 --max-batch-tokens 16384 --max-concurrent-requests 512 --auto-truncate
    ports:
      - "8080:80"
      - "9080:9000"  # Prometheus metrics
    volumes:
      - tei_embeddings_data:/data
    environment:
      - HUGGINGFACE_HUB_CACHE=/data
      - JSON_OUTPUT=true
      - NVIDIA_VISIBLE_DEVICES=all
    restart: unless-stopped
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - gpu

  tei-reranker:
    image: michaelf34/infinity:latest
    container_name: tei-reranker
    runtime: nvidia
    command:
      - v2
      - --model-id
      - mixedbread-ai/mxbai-rerank-large-v2
      - --port
      - "8083"
    environment:
      - HF_HOME=/app/.cache
    networks:
      - uaip-network
    volumes:
      - tei_reranker_data:/app/.cache
    ports:
      - "8083:8083"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - gpu

  # CPU-only TEI service for development/testing
  tei-embeddings-cpu:
    image: ghcr.io/huggingface/text-embeddings-inference:cpu-1.7
    container_name: uaip-tei-embeddings-cpu
    command: --model-id sentence-transformers/all-mpnet-base-v2 --port 80 --max-batch-tokens 8192 --max-concurrent-requests 256 --auto-truncate
    ports:
      - "8082:80"
      - "9082:9000"  # Prometheus metrics
    volumes:
      - tei_embeddings_cpu_data:/data
    environment:
      - HUGGINGFACE_HUB_CACHE=/data
      - JSON_OUTPUT=true
    restart: unless-stopped
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Message Queue
  rabbitmq:
    image: rabbitmq:4.1.0-management-alpine
    container_name: uaip-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-uaip_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-uaip_password}
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - uaip-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # Object Storage (MinIO)
  minio:
    image: minio/minio:latest
    container_name: uaip-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-uaip_minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-uaip_minio_password}
      MINIO_DOMAIN: minio
      MINIO_REGION_NAME: us-east-1
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    volumes:
      - minio_data:/data
      - minio_config:/root/.minio
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Shared base service - build once, use everywhere
  backend-base:
    build:
      context: .
      dockerfile: Dockerfile.base
    image: uaip-backend-base:latest
    command: ["echo", "Base image built successfully"]

  # Core Backend Services - Development with Hot Reloading
  agent-intelligence:
    image: uaip-backend-base:latest
    container_name: uaip-agent-intelligence
    environment:
      - SERVICE_NAME=agent-intelligence
      - SERVICE_PORT=3001
      - NODE_ENV=development
      - PORT=3001
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-uaip_user}:${POSTGRES_PASSWORD:-uaip_password}@postgres:5432/${POSTGRES_DB:-uaip}
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-uaip_dev_password}
      - TYPEORM_SYNC=true
      - REDIS_URL=redis://:${REDIS_PASSWORD:-uaip_redis_password}@redis:6379
      - QDRANT_URL=http://qdrant:6333
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-uaip_user}:${RABBITMQ_DEFAULT_PASS:-uaip_password}@rabbitmq:5672
      # TEI Configuration
      - TEI_EMBEDDING_URL=http://tei-embeddings:80
      - TEI_RERANKER_URL=http://tei-reranker:8083
      - TEI_EMBEDDING_CPU_URL=http://tei-embeddings-cpu:80
      # Enterprise Configuration
      - ENTERPRISE_MODE=false
      - ZERO_TRUST_MODE=disabled
      - SERVICE_ACCESS_MATRIX=standard
    ports:
      - "3001:3001"
    volumes:
      # Hot reloading - mount source code
      - ./packages:/app/packages
      - ./backend/shared:/app/backend/shared
      - ./backend/services/agent-intelligence:/app/backend/services/agent-intelligence
      - /app/node_modules
      - /app/backend/node_modules
    depends_on:
      backend-base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  orchestration-pipeline:
    image: uaip-backend-base:latest
    container_name: uaip-orchestration
    environment:
      - SERVICE_NAME=orchestration-pipeline
      - SERVICE_PORT=3002
      - NODE_ENV=development
      - PORT=3002
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-uaip_user}:${POSTGRES_PASSWORD:-uaip_password}@postgres:5432/${POSTGRES_DB:-uaip}
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-uaip_dev_password}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-uaip_redis_password}@redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-uaip_user}:${RABBITMQ_DEFAULT_PASS:-uaip_password}@rabbitmq:5672
    ports:
      - "3002:3002"
    volumes:
      # Hot reloading - mount source code
      - ./packages:/app/packages
      - ./backend/shared:/app/backend/shared
      - ./backend/services/orchestration-pipeline:/app/backend/services/orchestration-pipeline
      - /app/node_modules
      - /app/backend/node_modules
    depends_on:
      backend-base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  capability-registry:
    image: uaip-backend-base:latest
    container_name: uaip-capability-registry
    environment:
      - SERVICE_NAME=capability-registry
      - SERVICE_PORT=3003
      - NODE_ENV=development
      - PORT=3003
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-uaip_user}:${POSTGRES_PASSWORD:-uaip_password}@postgres:5432/${POSTGRES_DB:-uaip}
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-uaip_dev_password}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-uaip_redis_password}@redis:6379
      - QDRANT_URL=http://qdrant:6333
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-uaip_user}:${RABBITMQ_DEFAULT_PASS:-uaip_password}@rabbitmq:5672
      # TEI Configuration
      - TEI_EMBEDDING_URL=http://tei-embeddings:80
      - TEI_RERANKER_URL=http://tei-reranker:8083
      - TEI_EMBEDDING_CPU_URL=http://tei-embeddings-cpu:80
      # Enterprise Configuration
      - ENTERPRISE_MODE=false
      - ZERO_TRUST_MODE=disabled
      - SERVICE_ACCESS_MATRIX=standard
    ports:
      - "3003:3003"
    volumes:
      # Hot reloading - mount source code
      - ./packages:/app/packages
      - ./backend/shared:/app/backend/shared
      - ./backend/services/capability-registry:/app/backend/services/capability-registry
      - /app/node_modules
      - /app/backend/node_modules
    depends_on:
      backend-base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  discussion-orchestration:
    image: uaip-backend-base:latest
    container_name: uaip-discussion-orchestration
    environment:
      - SERVICE_NAME=discussion-orchestration
      - SERVICE_PORT=3005
      - NODE_ENV=development
      - PORT=3005
      - WEBSOCKET_ENABLED=true
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-uaip_user}:${POSTGRES_PASSWORD:-uaip_password}@postgres:5432/${POSTGRES_DB:-uaip}
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-uaip_dev_password}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-uaip_redis_password}@redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-uaip_redis_password}
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-uaip_user}:${RABBITMQ_DEFAULT_PASS:-uaip_password}@rabbitmq:5672
    ports:
      - "3005:3005"
    volumes:
      # Hot reloading - mount source code
      - ./packages:/app/packages
      - ./backend/shared:/app/backend/shared
      - ./backend/services/discussion-orchestration:/app/backend/services/discussion-orchestration
      - /app/node_modules
      - /app/backend/node_modules
    depends_on:
      backend-base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  security-gateway:
    image: uaip-backend-base:latest
    container_name: uaip-security-gateway
    environment:
      - SERVICE_NAME=security-gateway
      - SERVICE_PORT=3004
      - NODE_ENV=development
      - PORT=3004
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-uaip_user}:${POSTGRES_PASSWORD:-uaip_password}@postgres:5432/${POSTGRES_DB:-uaip}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-uaip_redis_password}@redis:6379
      - QDRANT_URL=http://qdrant:6333
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-uaip_user}:${RABBITMQ_DEFAULT_PASS:-uaip_password}@rabbitmq:5672
      - JWT_SECRET=${JWT_SECRET:-uaip_dev_jwt_secret_key_change_in_production}
      # MinIO Configuration
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-uaip_minio}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-uaip_minio_password}
      - MINIO_BUCKET_NAME=uaip-storage
      # TEI Configuration
      - TEI_EMBEDDING_URL=http://tei-embeddings:80
      - TEI_RERANKER_URL=http://tei-reranker:8083
      - TEI_EMBEDDING_CPU_URL=http://tei-embeddings-cpu:80
    ports:
      - "3004:3004"
    volumes:
      # Hot reloading - mount source code
      - ./packages:/app/packages
      - ./backend/shared:/app/backend/shared
      - ./backend/services/security-gateway:/app/backend/services/security-gateway
      - /app/node_modules
      - /app/backend/node_modules
    depends_on:
      backend-base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      tei-embeddings-cpu:
        condition: service_healthy
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  artifact-service:
    image: uaip-backend-base:latest
    container_name: uaip-artifact-service
    environment:
      - SERVICE_NAME=artifact-service
      - SERVICE_PORT=3006
      - NODE_ENV=development
      - PORT=3006
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-uaip_user}:${POSTGRES_PASSWORD:-uaip_password}@postgres:5432/${POSTGRES_DB:-uaip}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-uaip_redis_password}@redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-uaip_user}:${RABBITMQ_DEFAULT_PASS:-uaip_password}@rabbitmq:5672
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "3006:3006"
    volumes:
      # Hot reloading - mount source code
      - ./packages:/app/packages
      - ./backend/shared:/app/backend/shared
      - ./backend/services/artifact-service:/app/backend/services/artifact-service
      - /app/node_modules
      - /app/backend/node_modules
    depends_on:
      backend-base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  llm-service:
    image: uaip-backend-base:latest
    container_name: uaip-llm-service
    environment:
      - SERVICE_NAME=llm-service
      - SERVICE_PORT=3007
      - NODE_ENV=development
      - PORT=3007
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-uaip_user}:${POSTGRES_PASSWORD:-uaip_password}@postgres:5432/${POSTGRES_DB:-uaip}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-uaip_redis_password}@redis:6379
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-uaip_user}:${RABBITMQ_DEFAULT_PASS:-uaip_password}@rabbitmq:5672
      - OLLAMA_URL=${OLLAMA_URL:-http://localhost:11434}
      - LLM_STUDIO_URL=${LLM_STUDIO_URL:-http://localhost:1234}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LLM_PROVIDER_ENCRYPTION_KEY=${LLM_PROVIDER_ENCRYPTION_KEY:-default-key-change-in-production}
    ports:
      - "3007:3007"
    volumes:
      # Hot reloading - mount source code
      - ./packages:/app/packages
      - ./backend/shared:/app/backend/shared
      - ./backend/services/llm-service:/app/backend/services/llm-service
      - /app/node_modules
      - /app/backend/node_modules
    depends_on:
      backend-base:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service with Hot Reloading
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
      target: development
    container_name: council-frontend
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8081
      - VITE_API_TARGET=http://api-gateway:80
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - "5173:5173"
    volumes:
      # Hot reloading - mount source code
      - ./apps/frontend/src:/app/apps/frontend/src
      - ./apps/frontend/public:/app/apps/frontend/public
      - ./apps/frontend/index.html:/app/apps/frontend/index.html
      - ./apps/frontend/vite.config.ts:/app/apps/frontend/vite.config.ts
      - ./apps/frontend/tailwind.config.ts:/app/apps/frontend/tailwind.config.ts
      - ./apps/frontend/postcss.config.js:/app/apps/frontend/postcss.config.js
      - ./packages:/app/packages
      - /app/node_modules
      - /app/apps/frontend/node_modules
    networks:
      - uaip-network

  # API Gateway (Nginx as reverse proxy) with Frontend static files
  api-gateway:
    image: nginx:alpine
    container_name: uaip-api-gateway
    ports:
      - "8081:80"
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf
      - /home/pronit/workspace/council-of-nycea/apps/frontend/dist:/var/www/html
    depends_on:
      - agent-intelligence
      - orchestration-pipeline
      - capability-registry
      - discussion-orchestration
      - security-gateway
      - artifact-service
      - llm-service
      - frontend
    networks:
      - uaip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: uaip-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring:/etc/prometheus/config
      - prometheus_data:/prometheus
    networks:
      - uaip-network
    command:
      - '--config.file=/etc/prometheus/config/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Infrastructure Exporters
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: uaip-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-uaip_user}:${POSTGRES_PASSWORD:-uaip_password}@postgres:5432/${POSTGRES_DB:-uaip}?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - uaip-network
    depends_on:
      postgres:
        condition: service_healthy

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: uaip-redis-exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD:-uaip_redis_password}"
    ports:
      - "9121:9121"
    networks:
      - uaip-network
    depends_on:
      redis:
        condition: service_healthy

  node-exporter:
    image: prom/node-exporter:latest
    container_name: uaip-node-exporter
    ports:
      - "9100:9100"
    expose:
      - "9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - uaip-network
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|run|mnt|tmp)($$|/)'
      - '--collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$'
      - '--no-collector.netstat'
      - '--no-collector.softnet'
      - '--no-collector.netdev'
      - '--no-collector.arp'
      - '--no-collector.bcache'
      - '--no-collector.bonding'
      - '--no-collector.ipvs'
      - '--no-collector.infiniband'
      - '--no-collector.powersupplyclass'
      - '--no-collector.rapl'
      - '--no-collector.thermal_zone'
      - '--no-collector.xfs'
      - '--no-collector.zfs'
      - '--no-collector.hwmon'
      - '--no-collector.ntp'
    restart: unless-stopped
    pid: host

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: uaip-nginx-exporter
    ports:
      - "9113:9113"
    networks:
      - uaip-network
    depends_on:
      - api-gateway
    command:
      - '-nginx.scrape-uri=http://api-gateway:80/nginx_status'

  grafana:
    image: grafana/grafana:latest
    container_name: uaip-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - uaip-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  qdrant_data:
  rabbitmq_data:
  minio_data:
  minio_config:
  prometheus_data:
  grafana_data:
  # TEI Data Volumes
  tei_embeddings_data:
  tei_reranker_data:
  tei_embeddings_cpu_data:

networks:
  uaip-network:
    driver: bridge 